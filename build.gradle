buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.0.3'
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' // Contains less derpy launch4j plugin
        classpath 'edu.sc.seis.gradle:macappbundle:2.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'macAppBundle'

repositories {
	mavenCentral()
}

def grabDep(name, url){
	def f = new File('dep/' + name + ".jar")
    if(!f.exists()){
       println("  Downloading " + name + " from " + url)
       ant.get(src: url, dest: 'dep')
       file("dep/" + url.substring(url.lastIndexOf("/"))).renameTo(file("dep/" + name + ".jar"))
    }
}

dependencies {
    def f = new File('dep/')
    if(f.exists()){
        f.delete()
    }
    f.mkdirs()
    if(!f.exists()){
        f.mkdir()
    }
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.tukaani:xz:1.5'
    compile 'com.google.guava:guava:17.0'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-lang3:commons-lang3:3.3.2'
    compile 'org.apache.logging.log4j:log4j-api:2.0-beta9'
    compile 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    grabDep('authlib-1.5.17', 'https://libraries.minecraft.net/com/mojang/authlib/1.5.17/authlib-1.5.17.jar')
    grabDep('weblaf-complete-1.28', 'http://weblookandfeel.com/downloads/gpl/weblaf-complete-1.28.jar')
    compile files('dep/weblaf-complete-1.28.jar', 'dep/authlib-1.5.17".jar')
}

ext.configFile = file 'build.properties'

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

mainClassName = config.mainClass
version = "${config.version.reserved}.${config.version.major}.${config.version.minor}.${config.version.revision}"
group = 'com.atlauncher'
archivesBaseName = 'OpenLauncher'
sourceCompatibility = '1.6' // tergetCompatibility set by this automatically

jar {
    manifest {
        attributes "Implementation-Version": version
        attributes "Build-Jdk": org.gradle.internal.jvm.Jvm.current()
        //attributes "Class-Path": configurations.compile.collect { it.getName() }.join(' ')
        attributes "Built-By": System.getProperty("user.name")
        attributes "Implementation-Vender": "Modmuss50"
        attributes "Created-By": "Gradle " + project.getGradle().getGradleVersion()
    }
}

shadowJar  {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    dependencies {
        exclude(dependency('junit:junit'))
        exclude(dependency('org.hamcrest:hamcrest-core'))
    }
    classifier = ''
}

task copyMainJar(type: Copy) {
    from("${buildDir}/libs/")
    destinationDir = file("${buildDir}/macApp/ATLauncher.app/Contents/Java")
    rename { String fileName ->
        fileName.replace("-${version}", '')
    }
    rename(/(.+)-${version}(.+)/, '$1$2')
}

task copyToOutput(type: Copy) {
    from("${buildDir}/libs/")
    destinationDir = file("${buildDir}/distributions")
}

assemble.dependsOn.remove(createDmg)
build.dependsOn.remove(createDmg)
createApp.dependsOn.remove(copyToResourcesJava)
build.dependsOn(createAppZip)
createApp.dependsOn(copyMainJar)
copyMainJar.dependsOn(shadowJar)
build.finalizedBy(copyToOutput)

artifacts {
    archives file(project.tasks.jar.getArchivePath().getPath().replace(".jar", ".exe"))
    archives file(project.tasks.jar.getArchivePath().getPath().replace(".jar", ".zip").replace("libs", "distributions"))
}

macAppBundle {
    mainClassName = config.mainClass
    appName = "UntitledLauncher"
    icon = "src/main/resources/assets/image/Icon.icns"
}
